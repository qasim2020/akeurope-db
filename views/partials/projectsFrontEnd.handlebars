<script>
    function toCamelCase(str) {
        return str
            .toLowerCase()
            .replace(/[^a-zA-Z0-9]+(.)/g,
                (match, chr) => chr.toUpperCase()
            );
    }

    function toKebabCase(str) {
        return str
            .toLowerCase()                // Convert entire string to lowercase
            .replace(/[^a-z0-9]+/g, '-')  // Replace non-alphanumeric characters with hyphens
            .replace(/(^-|-$)/g, '');     // Remove leading or trailing hyphens if any
    }

    const resetModal = function (modal) {
        $(modal).find("input, .form-control").removeClass("is-invalid");
        $(modal).find("input, .form-control").removeClass("is-valid");
        $(modal).find(".invalid-feedback").remove();
        $(modal).find("span").removeClass("border-red");
        $(modal).find("span").removeClass("rounded-end");
        $(modal).find(".alert").remove();
        $(modal).closest(".modal").find(".accordion-item").removeClass("bg-red-lt");
        return true;
    }

    const checkModalValidity = function (modal) {
        let isValid = [];
        $(modal).find(".form-control").each((key, val) => {
            const isTomSelector = $(val).hasClass("ts-wrapper");
            if (isTomSelector) 
                return;
            const isSelector = $(val).hasClass("selector");
            let value;
            if (isSelector) {
                value = $(val).siblings("input").val();
            } else {
                value = $(val).val();
            }
            if (!value || value.trim() === "" || value.length === 0) {
                $(val).addClass("is-invalid");
                if ($(val).siblings(".form-control").length > 0) {
                    $(val).siblings(".form-control").addClass("is-invalid");
                }
                if ($(val).closest(".accordion-item").length > 0) {
                    $(val).closest(".accordion-item").addClass("bg-red-lt");
                }
                if ($(val).siblings("span").length > 0) {
                    $(val).siblings("span").after(`<div class="invalid-feedback mb-2">Invalid entry</div> `);
                    $(val).siblings("span").addClass("is-invalid border-red rounded-end");
                } else {
                    $(val).after(`<div class="invalid-feedback">Invalid entry</div> `);
                }
            } else {
                $(val).addClass("is-valid");
                $(val).siblings(".form-control").addClass("is-valid");
            }
            isValid.push(value != "");
        });

        if (highlightRepeatingValues(modal)) {
            return false;
        };

        if (!(isValid.every(val => val === true))) {
            return false;
        };

        return true;

    }

    const getModalFilledData = function (modal) {
        const name = $(modal).find(".project-name").val();
        const slug = $(modal).find(".project-slug").val();
        const location = $(modal).find(".project-location").val();
        const language = $(modal).find(".project-language").val();
        const status = $(modal).find(".project-status").find("input:checked").val();
        const currency = $(modal).find(".project-sub-cost-currency").val();

        const fields = $(modal).find(".accordion-item").map((key, val) => {
            let options = [];
            if ($(val).find(".dynamic-options").length > 0) {
                $(val).find(".dynamic-options input").each((key, dynamicField) => {
                    options.push({
                        label: $(dynamicField).attr("data-label"),
                        value: $(dynamicField).val()
                    })
                });
            }
            return {
                name: toCamelCase($(val).find("input:first").val()),
                actualName: $(val).find("input:first").val(),
                type: $(val).find(".form-select").val(),
                options: options.length > 0 ? options : undefined,
                primary: $(modal).find(".primary-field input").val() == $(val).find("input:first").val(),
                visible: checkVisibleField($(val).find("input:first").val(), $(modal)),
                subscription: checkSubscriptionField($(val).find("input:first").val(), $(modal)),
                status: checkStatusField($(val).find("input:first").val(), $(modal)),
                phone: checkPhoneField($(val).find("input:first").val(), $(modal)),
                sStart: $(modal).find(".s-start-field input").val() == $(val).find("input:first").val(),
                sStop: $(modal).find(".s-stop-field input").val() == $(val).find("input:first").val(),
            }
        }).get();

        return {
            name, status, location, language, slug, currency, fields,
        }
    }

    const showEditProjectModal = function (elem) {

        const projId = $(elem).attr("project-id");

        const modalExists = $(document).find(`#button-${projId}`).length > 0;

        if (modalExists) {
            $(`.modal[projId=${projId}]`).remove();
            $(`#button-${projId}`).remove();
        }

        $.ajax({
            url: `/getProjectModal/${projId}`,
            type: 'GET',
            contentType: 'application/json',
            success: function (response) {
                $("footer").before(response);
                $(`#button-${projId}`).trigger("click");
                let allAccordions = $(".accordion").length - 1;
                let el = document.querySelectorAll(".accordion")[allAccordions];
                new Sortable(el, {
                    animation: 100,
                    group: '.accordion',
                    draggable: '.accordion-item',
                    handle: '.accordion-header',
                    sort: true,
                    filter: '.sortable-disabled',
                    chosenClass: 'active'
                });
                const currencyEl = $(`.modal[projId=${projId}]`).find(".project-currency");
                startTomSelectCurrency(currencyEl)
            },
            error: function (xhr, status, error) {
                alert(xhr.responseText);
            }
        });

    }

    const updateProject = function (elem) {

        const modal = $(elem).closest(".modal");

        resetModal(modal);
        const isValidModal = checkModalValidity(modal);
        if (isValidModal == false) return;
        const data = getModalFilledData(modal);
        console.log(data);
        return;

        let currentBtnHTML = $(elem).html();
        $(elem).html(`<span class="spinner-border spinner-border-sm" role="status"></span>`);

        const id = $(modal).attr("projId");

        $.ajax({
            url: `/project/update/${id}`,
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(data),
            success: function (response) {
                $(elem).html(currentBtnHTML);
                window.location.href = "/projects";
            },
            error: function (xhr, status, error) {
                $(elem).html(currentBtnHTML);
                $(".modal-footer").append(`
                    <div class="w-100 d-block alert alert-danger mt-4" role="alert">
                    <h4 class="alert-title">Could not save.</h4>
                    <div class="text-secondary">${xhr.responseText}</div>
                    </div>
                `);
            }
        });

    };

    const createNewProject = function (elem) {

        const modal = $("#modal-new-project");

        resetModal(modal);
        const isValidModal = checkModalValidity(modal);
        if (isValidModal == false) return;
        const data = getModalFilledData(modal);
        console.log(data);
        return;

        let currentBtnHTML = $(elem).html();
        $(elem).html(`<span class="spinner-border spinner-border-sm me-2" role="status"></span>`);

        $.ajax({
            url: '/project/create',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(data),
            success: function (response) {
                $(elem).html(currentBtnHTML);
                window.location.href = "/projects";
            },
            error: function (xhr, status, error) {
                $(elem).html(currentBtnHTML);
                $(".modal-footer").append(`
        <div class="w-100 d-block alert alert-danger mt-4" role="alert">
          <h4 class="alert-title">Could not save.</h4>
          <div class="text-secondary">${xhr.responseText}</div>
        </div>`);
            }
        });

    }

    const highlightRepeatingValues = function ($container) {
        const valueCounts = new Map();
        let hasRepeatingValues = false;

        $container.find(".accordion-item").each((key, val) => {
            const $input = $(val).find("input:first");
            const inputValue = $input.val();

            if (valueCounts.has(inputValue)) {
                valueCounts.set(inputValue, valueCounts.get(inputValue) + 1);
            } else {
                valueCounts.set(inputValue, 1);
            }
        });

        $container.find(".accordion-item").each((key, val) => {
            const $input = $(val).find("input:first");
            const inputValue = $input.val();

            if (valueCounts.get(inputValue) > 1) {
                hasRepeatingValues = true;

                $input.addClass("is-invalid");

                if ($input.next('.invalid-feedback').length === 0) {
                    $input.after('<div class="invalid-feedback">This value is repeated.</div>');
                }

                $(val).addClass("bg-red-lt");
            }
        });

        return hasRepeatingValues;
    }

    document.addEventListener('DOMContentLoaded', function () {
        let el = document.querySelector('.accordion');
        if (el) {
            new Sortable(el, {
                animation: 100,
                group: '.accordion',
                draggable: '.accordion-item',
                handle: '.accordion-header',
                sort: true,
                filter: '.sortable-disabled',
                chosenClass: 'active'
            });
        }
    });

    $(document).on("click", ".add-project-field", function (e) {
        let projectSlug = $(this).closest(".modal").attr("projSlug");
        let fieldNo = $(this).closest(".modal-body").find(".accordion-button").length + 1;
        $('.accordion-button').addClass('collapsed');
        $('.accordion-collapse').removeClass('show').collapse('hide');
        $(this).closest(".modal-body").find(".accordion").append(`
    <div class="accordion-item accordion-edit-project">
      <h2 class="accordion-header d-flex justify-content-between" id="">
        <button class="accordion-button " type="button" data-bs-toggle="collapse" data-bs-target="#collapse-${projectSlug}-${fieldNo}" aria-expanded="true">
          Field # ${fieldNo}
        </button>
      </h2>
      <div id="collapse-${projectSlug}-${fieldNo}" class="accordion-collapse collapse show" data-bs-parent="#accordion-${projectSlug}">
        <div class="accordion-body pt-0">
          <div class="mb-3">
              <label class="form-label">Name</label>
              <input id="" type="text" class="form-control" name="example-text-input" placeholder="Field name" value="" />
          </div>
          <div class="mb-3">
              <label class="form-label">Type</label>
              <select class="form-select">
                <option value="string">String</option>
                <option value="textarea">Long text</option>
                <option value="number">Number</option>
                <option value="boolean">Boolean</option>
                <option value="dropdown">Dropdown</option>
                <option value="date">Date (Calendar)</option>
                <option value="image">Image upload</option>
                <option value="file">File upload</option>
              </select>
          </div>
          <div class="mb-3 text-center">
            <button class="btn btn-outline-danger border delete-project-field">
              <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-trash"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M4 7l16 0" /><path d="M10 11l0 6" /><path d="M14 11l0 6" /><path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12" /><path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3" /></svg>
              Delete this field
            </button>
          </div>
        </div>
      </div>
    </div>

    `);
    })

    $(document).on("click", ".delete-project-field", function (e) {
        const accordion = $(this).closest(".accordion");
        let modal = $(this).closest(".modal");
        let projectSlug = modal.attr("projSlug");
        $(this).closest(".accordion-item").remove();
        modal.find(".accordion-item").each((key, val) => {
            $(val).find(".accordion-button").attr({ "data-bs-target": `#collapse-${projectSlug}-${key + 1}` });
            $(val).find(".accordion-collapse").attr({ id: `collapse-${projectSlug}-${key + 1}` })
        });
        addVisibleField(accordion);
        addPrimaryField(accordion);
        addSubscriptionField(accordion);
    })

    $(document).on("change keyup", ".accordion-edit-project input, .accordion-edit-project .form-select", function () {
        clearMsgs(this);
        if ($(this).hasClass("form-select")) {
            addOptions(this);
        }
        addPrimaryField(this);
        addVisibleField(this);
        addSubscriptionField(this);
        addStatusField(this);
        addPhoneField(this);
        addSStartField(this);
        addSStopField(this);
        let input = $(this).closest(".accordion-item").find("input").val();
        let type = $(this).closest(".accordion-item").find(".form-select").val();
        $(this).closest(".accordion-item").find(".accordion-button").html(`
            <span class='d-none d-md-inline-block me-2'>Field is </span>
            <span class="badge bg-azure-lt me-2">${input}</span>
            <span class='d-none d-md-inline-block me-2'>with type of </span>
            <span class="badge bg-blue-lt">${type}</span>
        `);
    })

    const addPrimaryField = function (elem) {
        let allFields = $(elem).closest(".modal").find(".accordion-item").map((key, val) => {
            const inputType = $(val).find(".form-select:first").val();
            if (/^(string|textarea|number)$/.test(inputType)) {
                return $(val).find("input:first").val()
            } else {
                return null;
            }
        }).filter(val => val != null);
        if (allFields.length === 0)
            return;
        let html = ``;
        allFields.each((key, val) => {
            if (val.length > 0) {
                html += `<span class="p-2 badge cursor-pointer me-2 my-1" onclick="setPrimaryField(this)">${val}</span>`;
            }
        });
        $(elem).closest(".modal").find(".primary-field-selector").html(html);
        $(elem).closest(".modal").find(".primary-field input").removeClass("is-valid").val("");
        $(elem).closest(".modal").find(".primary-field .form-control").removeClass("is-valid");
        $(elem).closest(".modal").find(".primary-field .form-control").removeClass("is-invalid");
        $(elem).closest(".modal").find(".primary-field .invalid-feedback").remove();
    }

    const addVisibleField = function (elem) {
        let allFields = $(elem).closest(".modal").find(".accordion-item").map((key, val) => {
            return $(val).find("input:first").val()
        });
        if (allFields.length === 0)
            return;
        let html = ``;
        allFields.each((key, val) => {
            if (val.length > 0) {
                html += `<span class="p-2 badge cursor-pointer me-2 my-1" onclick="setVisibleField(this)">${val}</span>`;
            }
        });
        $(elem).closest(".modal").find(".visible-field-selector").html(html);
        $(elem).closest(".modal").find(".visible-field input").removeClass("is-valid").val("");
        $(elem).closest(".modal").find(".visible-field .form-control").removeClass("is-valid");
        $(elem).closest(".modal").find(".visible-field .form-control").removeClass("is-invalid");
        $(elem).closest(".modal").find(".visible-field .invalid-feedback").remove();
    }

    const addSubscriptionField = function (elem) {

        let allFields = $(elem).closest(".modal").find(".accordion-item").map((key, val) => {
            const inputType = $(val).find(".form-select:first").val();
            if (/^(number)$/.test(inputType)) {
                return $(val).find("input:first").val()
            } else {
                return null;
            }
        }).filter(val => val != null);
        if (allFields.length === 0)
            return;
        let html = ``;
        allFields.each((key, val) => {
            if (val.length > 0) {
                html += `<span class="p-2 badge cursor-pointer me-2 my-1" onclick="setSubscriptionField(this)">${val}</span>`;
            }
        });
        $(elem).closest(".modal").find(".subscription-field-selector").html(html);
        $(elem).closest(".modal").find(".subscription-field input").removeClass("is-valid").val("");
        $(elem).closest(".modal").find(".subscription-field .form-control").removeClass("is-valid");
        $(elem).closest(".modal").find(".subscription-field .form-control").removeClass("is-invalid");
        $(elem).closest(".modal").find(".subscription-field .invalid-feedback").remove();

    }

    const addStatusField = function (elem) {
        let allFields = $(elem).closest(".modal").find(".accordion-item").map((key, val) => {
            const inputType = $(val).find(".form-select:first").val();
            if (/^(textarea)$/.test(inputType)) {
                return $(val).find("input:first").val()
            } else {
                return null;
            }
        }).filter(val => val != null);
        if (allFields.length === 0)
            return;
        let html = ``;
        allFields.each((key, val) => {
            if (val.length > 0) {
                html += `<span class="p-2 badge cursor-pointer me-2 my-1" onclick="setStatusField(this)">${val}</span>`;
            }
        });
        $(elem).closest(".modal").find(".status-field-selector").html(html);
        $(elem).closest(".modal").find(".status-field input").removeClass("is-valid").val("");
        $(elem).closest(".modal").find(".status-field .form-control").removeClass("is-valid");
        $(elem).closest(".modal").find(".status-field .form-control").removeClass("is-invalid");
        $(elem).closest(".modal").find(".status-field .invalid-feedback").remove();
    }

    const addPhoneField = function (elem) {
        let allFields = $(elem).closest(".modal").find(".accordion-item").map((key, val) => {
            const inputType = $(val).find(".form-select:first").val();
            if (/^(string)$/.test(inputType)) {
                return $(val).find("input:first").val()
            } else {
                return null;
            }
        }).filter(val => val != null);
        if (allFields.length === 0)
            return;
        let html = ``;
        allFields.each((key, val) => {
            if (val.length > 0) {
                html += `<span class="p-2 badge cursor-pointer me-2 my-1" onclick="setPhoneField(this)">${val}</span>`;
            }
        });
        $(elem).closest(".modal").find(".phone-field-selector").html(html);
        $(elem).closest(".modal").find(".status-field input").removeClass("is-valid").val("");
        $(elem).closest(".modal").find(".status-field .form-control").removeClass("is-valid");
        $(elem).closest(".modal").find(".status-field .form-control").removeClass("is-invalid");
        $(elem).closest(".modal").find(".status-field .invalid-feedback").remove();
    }

    const addSStartField = function (elem) {
        let allFields = $(elem).closest(".modal").find(".accordion-item").map((key, val) => {
            const inputType = $(val).find(".form-select:first").val();
            if (/^(date)$/.test(inputType)) {
                return $(val).find("input:first").val()
            } else {
                return null;
            }
        }).filter(val => val != null);
        if (allFields.length === 0)
            return;
        let html = ``;
        allFields.each((key, val) => {
            if (val.length > 0) {
                html += `<span class="p-2 badge cursor-pointer me-2 my-1" onclick="setSStartField(this)">${val}</span>`;
            }
        });
        $(elem).closest(".modal").find(".s-start-field-selector").html(html);
        $(elem).closest(".modal").find(".s-start-field input").removeClass("is-valid").val("");
        $(elem).closest(".modal").find(".s-start-field .form-control").removeClass("is-valid");
        $(elem).closest(".modal").find(".s-start-field .form-control").removeClass("is-invalid");
        $(elem).closest(".modal").find(".s-start-field .invalid-feedback").remove();
    }

    const addSStopField = function (elem) {
        let allFields = $(elem).closest(".modal").find(".accordion-item").map((key, val) => {
            const inputType = $(val).find(".form-select:first").val();
            if (/^(date)$/.test(inputType)) {
                return $(val).find("input:first").val()
            } else {
                return null;
            }
        }).filter(val => val != null);
        if (allFields.length === 0)
            return;
        let html = ``;
        allFields.each((key, val) => {
            if (val.length > 0) {
                html += `<span class="p-2 badge cursor-pointer me-2 my-1" onclick="setSStopField(this)">${val}</span>`;
            }
        });
        $(elem).closest(".modal").find(".s-stop-field-selector").html(html);
        $(elem).closest(".modal").find(".s-stop-field input").removeClass("is-valid").val("");
        $(elem).closest(".modal").find(".s-stop-field .form-control").removeClass("is-valid");
        $(elem).closest(".modal").find(".s-stop-field .form-control").removeClass("is-invalid");
        $(elem).closest(".modal").find(".s-stop-field .invalid-feedback").remove();
    }

    const checkSubscriptionField = function (field, modal) {
        const array = $(modal).find(".subscription-field").find(".bg-blue-lt").map((key, val) => $(val).html()).get();
        return array.includes(field);
    }

    const checkVisibleField = function (field, modal) {
        const array = $(modal).find(".visible-field").find(".bg-blue-lt").map((key, val) => $(val).html()).get();
        return array.includes(field);
    };

    const checkStatusField = function (field, modal) {
        const array = $(modal).find(".status-field").find(".bg-blue-lt").map((key, val) => $(val).html()).get();
        return array.includes(field);
    };

    const checkPhoneField = function (field, modal) {
        const array = $(modal).find(".phone-field").find(".bg-blue-lt").map((key, val) => $(val).html()).get();
        return array.includes(field);
    };

    const setPrimaryField = function (elem) {
        $(elem).siblings().removeClass("bg-blue-lt");
        $(elem).addClass("bg-blue-lt");
        $(elem).closest(".primary-field").find("input").val($(elem).html());
        clearMsgs(elem);
    }

    const setVisibleField = function (elem) {
        $(elem).toggleClass("bg-blue-lt");
        const array = $(elem).closest(".visible-field").find(".bg-blue-lt").map((key, val) => $(val).html()).get();
        $(elem).closest(".visible-field").find("input").val(array.length > 0 ? array.join(',') : '');
        clearMsgs(elem);
    }

    const setSubscriptionField = function (elem) {
        $(elem).toggleClass("bg-blue-lt");
        const array = $(elem).closest(".subscription-field").find(".bg-blue-lt").map((key, val) => $(val).html()).get();
        $(elem).closest(".subscription-field").find("input").val(array.length > 0 ? array.join(',') : '');
        clearMsgs(elem);
    }

    const setStatusField = function (elem) {
        $(elem).siblings().removeClass("bg-blue-lt");
        $(elem).addClass("bg-blue-lt");
        $(elem).closest(".status-field").find("input").val($(elem).html());
        clearMsgs(elem);
    }

    const setPhoneField = function (elem) {
        $(elem).toggleClass("bg-blue-lt");
        const array = $(elem).closest(".phone-field").find(".bg-blue-lt").map((key, val) => $(val).html()).get();
        $(elem).closest(".phone-field").find("input").val(array.length > 0 ? array.join(',') : '');
        clearMsgs(elem);
    }

    const setSStartField = function (elem) {
        $(elem).siblings().removeClass("bg-blue-lt");
        $(elem).toggleClass("bg-blue-lt");
        $(elem).closest(".s-start-field").find("input").val($(elem).html());
        clearMsgs(elem);
    }

    const setSStopField = function (elem) {
        $(elem).siblings().removeClass("bg-blue-lt");
        $(elem).toggleClass("bg-blue-lt");
        $(elem).closest(".s-stop-field").find("input").val($(elem).html());
        clearMsgs(elem);
    }

    const clearMsgs = function (elem) {
        $(elem).closest(".form-field").removeClass("bg-red-lt");
        $(elem).closest(".form-field").find(".invalid-feedback").remove();
        $(elem).closest(".form-field").find(".is-valid").removeClass("is-valid");
        $(elem).closest(".form-field").find(".is-invalid").removeClass("is-invalid");
    }

    const addOptions = function (elem) {

        $(elem).closest(".accordion-body").find(".dynamic-options").remove();

        const fieldType = $(elem).val();

        let html = "";

        if (fieldType === "boolean") {
            html += `
            <label class="form-label dynamic-options">Select boolean values</label>
            <div class="mb-3 dynamic-options">

                <div class="row g-2" style="margin-bottom:0.5rem">
                    <div class="col-auto">
                        <a href="#" class="btn btn-icon disabled" aria-label="Button">
                            <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-check"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5 12l5 5l10 -10" /></svg>
                        </a>
                    </div>
                    <div class="col">
                        <input type="text" data-label="true" class="form-control" placeholder="Active">
                    </div>
                </div>

                <div class="row g-2" style="margin-bottom:0.5rem">
                    <div class="col-auto">
                        <a href="#" class="btn btn-icon disabled" aria-label="Button">
                            <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-x"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M18 6l-12 12" /><path d="M6 6l12 12" /></svg>
                        </a>
                    </div>
                    <div class="col">
                        <input type="text" data-label="false" class="form-control" placeholder="Inactive">
                    </div>
                </div>

            </div>
        `;
        } else if (fieldType === "dropdown") {
            html += `
            <label class="form-label dynamic-options">Add / edit dropdown options</label>
            <div class="mb-3 dynamic-options">
                <div class="row g-2">
                    <div class="col-auto">
                        <a href="#" class="btn btn-icon" aria-label="Button" onclick="addOption(this)">
                            <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-plus"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 5l0 14" /><path d="M5 12l14 0" /></svg>
                        </a>
                        <a href="#" class="btn btn-icon" aria-label="Button" onclick="deleteOption(this)">
                            <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-trash"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M4 7l16 0" /><path d="M10 11l0 6" /><path d="M14 11l0 6" /><path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12" /><path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3" /></svg>
                        </a>
                    </div>
                    <div class="col">
                        <input type="text" class="form-control" placeholder="Enter your option">
                    </div>
                </div>
            </div>
        `;
        };

        // Append the generated HTML to the appropriate container
        $(elem).closest(".accordion-body").find(".text-center").before(html); // Adjust the selector to your actual container
    }

    const addOption = function (elem) {
        let html = `
        <div class="mb-3 dynamic-options">
            <div class="row g-2">
                <div class="col-auto">
                    <a href="#" class="btn btn-icon" aria-label="Button" onclick="addOption(this)">
                        <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-plus"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 5l0 14" /><path d="M5 12l14 0" /></svg>
                    </a>
                    <a href="#" class="btn btn-icon" aria-label="Button" onclick="deleteOption(this)">
                        <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-trash"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M4 7l16 0" /><path d="M10 11l0 6" /><path d="M14 11l0 6" /><path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12" /><path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3" /></svg>
                    </a>
                </div>
                <div class="col">
                    <input type="text" class="form-control" placeholder="Enter your option">
                </div>
            </div>
        </div>
        `;
        $(elem).closest(".accordion-body").find(".text-center").before(html);
    }

    const deleteOption = function (elem) {
        if ($(elem).closest(".accordion-body").find(".mb-3.dynamic-options").length == 1) {
            return console.log("can't be deleted as this is the last option");
        }
        $(elem).closest(".mb-3").remove();
    }

    const toggleSelection = function (elem) {
        const parentDiv = $(elem).closest(".visible-field");
        const selectors = parentDiv.find(".badge");
        const newValues = selectors.map((index, element) => {
            if ($(element).hasClass("bg-blue-lt")) {
                $(element).removeClass("bg-blue-lt");
                return null;
            } else {
                $(element).addClass("bg-blue-lt");
                return $(element).text();
            }
        }).get().filter(val => val != null).join(',');
        console.log(newValues);
        parentDiv.find("input").val(newValues);
    }

    $(document).on('hide.bs.modal', '.modal', function () {
        console.log('modal started hiding');

        $(this).find(':focus, .btn-close').blur();

        // Step 2: Move focus to the first visible & focusable element outside the modal
        const $fallbackFocus = $('body')
            .find('a, button, input, textarea, select, [tabindex]:not([tabindex="-1"])')
            .filter(':visible')
            .not(this)
            .first();

        if ($fallbackFocus.length) {
            $fallbackFocus.focus();
        }
    });

    $(document).on('hidden.bs.modal', '.modal', function () {
        $(this).removeAttr('aria-hidden');
    });

    let newLayout = '{{data.layout}}' == 'grid' ? 'table' : 'grid';

    const setProjectType = function (elem) {
        const modal = $(elem).closest(".modal");
        const projectType = $(elem).val();
        console.log({ projectType });
        if (projectType === "orphan") {
            modal.find(".s-start-field").addClass("d-none");
            modal.find(".s-stop-field").addClass("d-none");
        } else {
            modal.find(".s-start-field").removeClass("d-none");
            modal.find(".s-stop-field").removeClass("d-none");
        };
    }

    document.addEventListener("DOMContentLoaded", function () {
        var el = document.getElementById('project-currency');
        startTomSelectCurrency(el);
    });

    const startTomSelectCurrency = function (el) {
        if (!el) {
            console.log(`Element ${$(el).attr('id')} not found!`);
            return;
        }

        if (window.TomSelect) {
            new TomSelect($(el), {
                create: false,
                sortField: {
                    field: "text",
                    direction: "asc"
                },
                placeholder: 'Select currency...'
            });

            console.log("TomSelect initialized successfully.");
        } else {
            console.log("TomSelect is not available.");
        }
    }

</script>