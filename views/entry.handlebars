<div class="page-header d-print-none">
  <div class="container-xl">
    <div class="row">
      <div class="col me-auto mb-3">
        <div class="page-pretitle"> Overview </div>
        <h2 class="page-title">
          {{#if data.entry.deleted}}
          Not Found
          {{else}}
          {{#if data.entry.name}}
          {{data.entry.name}}
          {{else}}
          {{lookup data.entry (findPrimaryKey data.project.fields)}}
          {{/if}}
          {{/if}}
          </ol>
        </h2>
      </div>
      <div class="col-md-4 col-12 mb-4">
        <div class="row g-2 align-items-center">
          <div class="col-auto">
            <a id="prev-btn" class="btn btn-icon"
              href="/entry/{{data.neighbors.prev._id}}/project/{{data.project.slug}}">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                class="icon icon-tabler icons-tabler-outline icon-tabler-arrow-left">
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M5 12l14 0" />
                <path d="M5 12l6 6" />
                <path d="M5 12l6 -6" />
              </svg>
            </a>
          </div>
          <div class="col">
            <select type="text" class="form-select" id="select-people" value="{{data.entry._id}}" tabindex="-1">
              {{#each data.neighbors.array}}
              <option value="{{this._id}}">{{this.name}}</option>
              {{/each}}
            </select>
          </div>
          <div class="col-auto">
            <a id="next-btn" class="btn btn-icon"
              href="/entry/{{data.neighbors.next._id}}/project/{{data.project.slug}}">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                class="icon icon-tabler icons-tabler-outline icon-tabler-arrow-right">
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M5 12l14 0" />
                <path d="M13 18l6 -6" />
                <path d="M13 6l6 6" />
              </svg>
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="container-xl" id="data-container">
  <div class="row row-deck row-cards">
    {{> showEntry}}
    <div class="d-block col-12 col-md-8">
      {{#if (findInArray data.role 'viewOrders')}}
      {{> showEntryPayments}}
      {{/if}}
      {{#if (findInArray data.role 'viewOrderOutline')}}
      {{> showEntryPaymentsOutline}}
      {{/if}}
      {{#if (findInArray data.role 'viewFiles')}}
      <div class="card mb-3" id="files-container" entity-type="entry" entity-id="{{data.entry._id}}"
        entity-slug="{{data.project.slug}}" entity-url="/entry/{{data.entry._id}}/project/{{data.project.slug}}"
        file-types="application/pdf,image/*,video/*" file-url="/uploadFileToEntry" video-url="/uploadVideoToEntry">
        {{> showEntityFiles data=data beneficiary=true}}
      </div>
      {{/if}}
      {{> showEntryLogs}}
    </div>
  </div>
</div>

{{#if (findInArray data.role "editEntry")}}
{{> editEntryModal}}
{{/if}}

{{#if (findInArray data.role "createOrders")}}
{{> emptyOrderModal}}
{{/if}}

<script src="https://cdn.jsdelivr.net/npm/tom-select/dist/js/tom-select.complete.min.js"></script>

{{> entryFrontEnd}}

<script>

  const showDataAsSuch = function (url, containerId) {
    $.ajax({
      url: url,
      method: 'GET',
      success: function (response) {
        $(containerId).replaceWith(response);
        refreshFsLightbox();
      },
      error: function (error) {
        alert(error.responseText);
      }
    });
  }

  const getEntryLogs = function (elem, href) {
    href = href || $(elem).attr("my-href");
    $.ajax({
      url: href,
      method: 'GET',
      success: function (response) {
        $('#logs-container').replaceWith(response);
      },
      error: function (error) {
        $('#logs-container').html(error.responseText);
      }
    })
  }

  // tom select - the right search bar on the top

  $(document).on('click', '#next-btn, #prev-btn', function (e) {
    e.preventDefault();
    var href = $(this).attr('href');
    window.location.href = href;
  });

  $(document).keydown(function (e) {
    if (($(':focus').length === 0 || $(':focus').is('input, textarea') === false) &&
      !$('.modal.show').length &&
      !$('.fslightbox-open').length) {
      if (e.key === 'ArrowRight') {
        $('#next-btn').trigger('click');
      } else if (e.key === 'ArrowLeft') {
        $('#prev-btn').trigger('click');
      }
    }
  });

  const refreshContainers = function () {
    showDataAsSuch('/getSingleEntryData/{{data.entry._id}}/project/{{data.project.slug}}', '#entry-container');
    showDataAsSuch('/getSingleEntryLogs/{{data.entry._id}}/project/{{data.project.slug}}', '#logs-container');
  }

  document.addEventListener("DOMContentLoaded", function () {
    var el = document.getElementById('select-people');

    if (!el) {
      console.log("Element #select-people not found!");
      return;
    }

    if (window.TomSelect) {
      var ts = new TomSelect(el, {
        valueField: '_id', // Unique identifier
        labelField: 'name', // Display name
        searchField: 'name', // Search on name
        copyClassesToDropdown: false,
        dropdownParent: 'body',
        controlInput: '<input>',
        load: function (query, callback) {
          if (!query.length) return callback();

          $.ajax({
            url: `/searchEntry/{{data.project.slug}}?q=${query}`,
            type: 'GET',
            dataType: 'json',
            success: function (response) {
              callback(response.data);
            },
            error: function () {
              callback();
            }
          });
        },
        render: {
          item: function (data, escape) {
            return `<div><span class="dropdown-item-indicator">${data.customProperties || ""}</span>${escape(data.name)}</div>`;
          },
          option: function (data, escape) {
            return `<div><span class="dropdown-item-indicator">${data.customProperties || ""}</span>${escape(data.name)}</div>`;
          },
        },
        onChange: function (value) {
          if (!value) return;
          const newUrl = `/entry/${value}/project/{{data.project.slug}}`;
          window.location.href = newUrl;
        },
      });

      console.log("TomSelect initialized successfully.");
    } else {
      console.log("TomSelect is not available.");
    }
  });

  const getSendUpdateModal = function (elem) {

    const entryId = '{{data.entry._id}}';
    const slug = '{{data.project.slug}}';

    if (!entryId || !slug) {
      return alert('No entryId or Slug found');
    }

    const modalExists = $(document).find(`#button-update-${entryId}`).length > 0;

    if (modalExists) {
      $(`#button-${entryId}`).remove();
      $(`#modal-update-${entryId}`).remove();
    }

    $.ajax({
      url: `/getSendUpdateModal-entry/${entryId}/${slug}`,
      type: 'GET',
      contentType: 'application/json',
      success: function (response) {
        $("footer").before(response);
        $(`#button-update-${entryId}`).trigger("click");
        initializePopovers();
      },
      error: function (xhr, status, error) {
        alert(xhr.responseText);
      }
    });
  }


  const sendUpdateToDonor = function (elem) {
    const modal = $(elem).closest('.modal');
    const entryId = '{{data.entry._id}}';
    const slug = '{{data.project.slug}}';
    const subject = $(modal).find('input[name="subject"]').val();
    const salute = $(modal).find('input[name="salute"]').val();
    const message = $(modal).find('textarea[name="message"]').val();
    const selectedFiles = $(modal).find('input[name="selectedFiles"]:checked').map(function () {
      return this.value;
    }).get();

    if (!message.trim() || !subject.trim() || !salute.trim()) {
      return alert('Please enter heading, salutation and message before sending the update.');
    }

    const currentBtnHtml = $(elem).html();
    $(elem).html(`
      <span class="spinner-border spinner-border-sm me-2" role="status"></span>
      Sending Update...
    `);

    $.ajax({
      url: `/sendEntryUpdateOnEmail/${entryId}/${slug}`,
      type: 'POST',
      contentType: 'application/json',
      data: JSON.stringify({ subject, message, salute, files: selectedFiles }),
      success: function (response) {
        $(elem).html(currentBtnHtml);
        $('#emailStatus').text('Email: Sent');
        refreshContainers(modal);
      },
      error: function (xhr, status, error) {
        alert(xhr.responseText);
      }
    });
  }


</script>