<!-- Page header -->
<div class="page-header d-print-none">
  <div class="container-xl">
    <div class="row">
      <div class="col me-auto mb-3">
        <div class="page-pretitle"> Overview </div>
        <h2 class="page-title">
          {{#if data.entry}}
          {{#if data.entry.name}}
          {{data.entry.name}}
          {{else}}
          {{lookup data.entry (findPrimaryKey data.project.fields)}}
          {{/if}}
          {{else}}
          Entry deleted
          {{/if}}
          </ol>
        </h2>
      </div>
      <div class="col-md-4 col-12 mb-4">
        <div class="row g-2 align-items-center">
          <div class="col-auto">
            <a id="prev-btn" class="btn btn-icon"
              href="/entry/{{data.neighbors.prev._id}}/project/{{data.project.slug}}">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                class="icon icon-tabler icons-tabler-outline icon-tabler-arrow-left">
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M5 12l14 0" />
                <path d="M5 12l6 6" />
                <path d="M5 12l6 -6" />
              </svg>
            </a>
          </div>
          <div class="col">
            <select type="text" class="form-select" id="select-people" value="{{data.entry._id}}" tabindex="-1">
              {{#each data.neighbors.array}}
              <option value="{{this._id}}">{{this.name}}</option>
              {{/each}}
            </select>
          </div>
          <div class="col-auto">
            <a id="next-btn" class="btn btn-icon"
              href="/entry/{{data.neighbors.next._id}}/project/{{data.project.slug}}">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                class="icon icon-tabler icons-tabler-outline icon-tabler-arrow-right">
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M5 12l14 0" />
                <path d="M13 18l6 -6" />
                <path d="M13 6l6 6" />
              </svg>
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="container-xl" id="data-container">
  <div class="row row-deck row-cards">
    {{> showEntry}}
    <div class="d-block col-12 col-md-8">
      {{#if (findInArray data.role 'viewOrders')}}
      {{> showEntryPayments}}
      {{/if}}
      {{#if (findInArray data.role 'viewFiles')}}
      <div class="card mb-3" id="files-container" 
        entity-type="entry" entity-id="{{data.entry._id}}" entity-slug="{{data.project.slug}}" 
        entity-url="/entry/{{data.entry._id}}/project/{{data.project.slug}}" 
        file-url="/uploadFileToEntry">
        {{> showEntityFiles data=data beneficiary=true}}
      </div>
      {{/if}}
      {{> showEntryLogs}}
    </div>
  </div>
</div>

{{#if (findInArray data.role "editEntry")}}
{{> editEntryModal}}
{{/if}}

{{#if (findInArray data.role "createOrders")}}
{{> emptyOrderModal}}
{{/if}}

<script src="https://cdn.jsdelivr.net/npm/tom-select/dist/js/tom-select.complete.min.js"></script>

<script>

  const deleteEntry = function (elem) {
    const entryId = $(elem).attr("entry-id");
    $.ajax({
      url: '/project/entry/delete/{{data.project.slug}}',
      method: 'POST',
      data: { entryId },
      success: function (response) {
        $(elem).closest(".data-row").remove();
      },
      error: function (error) {
        alert(error.responseText)
      }
    });
  }

  const editEntry = function (elem) {

    $(elem).closest(".modal").find("input").removeClass("is-invalid");
    $(elem).closest(".modal").find(".invalid-feedback").remove();
    $(elem).closest(".modal").find("span").removeClass("border-red");
    $(elem).closest(".modal").find("span").removeClass("rounded-end");
    $(elem).closest(".modal").find(".alert").remove();

    let isValid = [];

    $(elem).closest(".modal").find(".entry-input").each((key, val) => {
      if ($(val).val() == "") {
        $(val).addClass("is-invalid")
        if ($(val).siblings("span").length > 0) {
          $(val).siblings(".invalid-feedback").remove();
          $(val).siblings("span").after(`<div class="invalid-feedback mb-2">Invalid entry</div> `);
          $(val).siblings("span").addClass("is-invalid border-red rounded-end");
          $(val).siblings("input").addClass("is-invalid");
        } else {
          $(val).after(`<div class="invalid-feedback">Invalid entry</div> `);
        }
      } else {
        $(val).addClass("is-valid");
      }
      isValid.push($(val).val() != "");
    });

    const data = $(elem)
      .closest(".modal")
      .find(".form-select, input, textarea")
      .toArray()
      .reduce((total, val) => {
        Object.assign(total, {
          [$(val).attr("name")]: $(val).val()
        });
        return total;
      }, {});

    if (!(isValid.every(val => val === true))) {
      return false;
    }

    let currentBtnHTML = $(elem).html();

    $(elem).html(`<span class="spinner-border spinner-border-sm me-2" role="status"></span>`);

    const entryId = $(elem).closest(".modal").attr("entryId");

    $.ajax({
      url: `/project/entry/update/{{data.project.slug}}/${entryId}`,
      type: 'POST',
      contentType: 'application/json',
      data: JSON.stringify(data),
      success: function (response) {
        $(elem).html(currentBtnHTML);
        showDataAsSuch('/getSingleEntryData/{{data.entry._id}}/project/{{data.project.slug}}', '#entry-container');
        showDataAsSuch('/getSingleEntryLogs/{{data.entry._id}}/project/{{data.project.slug}}', '#logs-container');
      },
      error: function (xhr, status, error) {
        $(elem).html(currentBtnHTML);
        $(".modal-footer").append(`
        <div class="w-100 d-block alert alert-danger mt-4" role="alert">
          <h4 class="alert-title">Could not save.</h4>
          <div class="text-secondary">${xhr.responseText}</div>
        </div>`);
      }
    });

  }

  const showDataAsSuch = function (url, containerId) {
    $.ajax({
      url: url,
      method: 'GET',
      success: function (response) {
        $(containerId).replaceWith(response);
        refreshFsLightbox();
      },
      error: function (error) {
        alert(error.responseText);
      }
    });
  }

  const getEntryLogs = function (elem, href) {
    href = href || $(elem).attr("my-href");
    $.ajax({
      url: href,
      method: 'GET',
      success: function (response) {
        $('#logs-container').replaceWith(response);
      },
      error: function (error) {
        $('#logs-container').html(error.responseText);
      }
    })
  }

  // Here start creating entries on click of save-entry button

  const uploadImage = function (elem) {
    $(elem).closest(".image-upload").find("input[type=file]").trigger("click");
  }

  $(document).on('change', ".image-upload input", function (event) {
    let elem = $(this);
    let inputName = $(this).attr("name");
    if (event.target.files && event.target.files[0]) {
      var reader = new FileReader();
      reader.onload = function (e) {
        $(elem).closest(".image-upload").find("img").attr("src", e.target.result);
      };

      // Read the image file as a data URL
      reader.readAsDataURL(event.target.files[0]);

      // Send the image to the backend
      var formData = new FormData();
      formData.append('image', event.target.files[0]);
      formData.append('folderName', `akeurope/akeurope_project_entries/{{data.project.slug}}/${inputName}`);
      formData.append('entryId', $(elem).closest(".modal").attr("entryId"));

      $(elem).closest(".image-upload").find(".btn").html(`<span class="spinner-border spinner-border-sm" role="status"></span>`);

      $.ajax({
        url: '/upload-image',
        type: 'POST',
        data: formData,
        contentType: false,
        processData: false,
        success: function (response) {
          $(elem).closest(".image-upload").find(".cloudinaryUrl").val(response.cloudinaryUrl);
          $(elem).closest(".image-upload").find(".btn").html(`
                <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-check"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5 12l5 5l10 -10" /></svg>
              `);
          $(elem).closest(".image-upload").find("img").attr("src", response.cloudinaryUrl);
          $(elem).closest('.image-upload').find('[data-fslightbox]').attr({ href: response.cloudinaryUrl });
          editEntry(elem);
          refreshFsLightbox();
        },
        error: function (error) {
          $(elem).closest(".image-upload").find(".btn").html(`
                <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-x"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M18 6l-12 12" /><path d="M6 6l12 12" /></svg>
              `);
          alert("Error uploading image:", error);
        }
      });
    }

  });

  const uploadPdf = function (elem) {
    $(elem).closest(".upload-pdf").find("input").trigger("click");
  }

  $(document).on("change", ".upload-pdf input", function (event) {

    const elem = $(this);
    const fileInput = $(this)[0];
    const file = fileInput.files[0];
    const inputName = $(this).attr("name");

    if (!file) {
      alert("Please select a PDF file.");
      return;
    }

    // Ensure the file type is PDF
    if (file.type !== 'application/pdf') {
      alert("Only PDF files are allowed.");
      return;
    }

    // Prepare form data to send to backend
    const formData = new FormData();
    formData.append('pdf', file);
    formData.append('folderName', `akeurope/akeurope_project_entries/{{data.project.slug}}/${inputName}`);
    formData.append('entryId', $(elem).closest(".modal").attr("entryId"));


    $(elem).closest(".upload-pdf").find(".btn").html(`<span class="spinner-border spinner-border-sm" role="status"></span>`);
    // Send PDF file to the backend via AJAX
    $.ajax({
      url: '/upload-pdf',  // Backend route to handle PDF upload
      type: 'POST',
      data: formData,
      contentType: false,
      processData: false,
      success: function (response) {
        $(elem).closest(".upload-pdf").find(".cloudinaryUrl").val(response.cloudinaryUrl);
        $(elem).closest(".upload-pdf").find(".btn").html(`
              <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-check"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5 12l5 5l10 -10" /></svg>
            `);
      },
      error: function (error) {
        alert("Error uploading PDF:", error);
      }
    });
  })

  document.addEventListener("DOMContentLoaded", function () {
    var el = document.getElementById('select-people');

    if (!el) {
      console.log("Element #select-people not found!");
      return;
    }

    if (window.TomSelect) {
      var ts = new TomSelect(el, {
        valueField: '_id', // Unique identifier
        labelField: 'name', // Display name
        searchField: 'name', // Search on name
        copyClassesToDropdown: false,
        dropdownParent: 'body',
        controlInput: '<input>',
        load: function (query, callback) {
          if (!query.length) return callback(); 

          $.ajax({
            url: `/searchEntry/{{data.project.slug}}?q=${query}`, 
            type: 'GET',
            dataType: 'json',
            success: function (response) {
              callback(response.data);
            },
            error: function () {
              callback(); 
            }
          });
        },
        render: {
          item: function (data, escape) {
            return `<div><span class="dropdown-item-indicator">${data.customProperties || ""}</span>${escape(data.name)}</div>`;
          },
          option: function (data, escape) {
            return `<div><span class="dropdown-item-indicator">${data.customProperties || ""}</span>${escape(data.name)}</div>`;
          },
        },
        onChange: function (value) {
          if (!value) return;
          const newUrl = `/entry/${value}/project/{{data.project.slug}}`;
          window.location.href = newUrl;
        },
      });

      console.log("TomSelect initialized successfully.");
    } else {
      console.log("TomSelect is not available.");
    }
  });

  $(document).on('click', '#next-btn, #prev-btn', function (e) {
    e.preventDefault();
    var href = $(this).attr('href');
    window.location.href = href;
  });

  $(document).keydown(function (e) {
    if (($(':focus').length === 0 || $(':focus').is('input, textarea') === false) &&
      !$('.modal.show').length &&
      !$('.fslightbox-open').length) {
      if (e.key === 'ArrowRight') {
        $('#next-btn').trigger('click');
      } else if (e.key === 'ArrowLeft') {
        $('#prev-btn').trigger('click');
      }
    }
  });

  const refreshContainers = function() {
    showDataAsSuch('/getSingleEntryData/{{data.entry._id}}/project/{{data.project.slug}}', '#entry-container');
    showDataAsSuch('/getSingleEntryLogs/{{data.entry._id}}/project/{{data.project.slug}}', '#logs-container');
  }
</script>