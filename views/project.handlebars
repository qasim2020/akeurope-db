<div class="page-header d-print-none">
  <div class="container-xl">
    <div class="row g-2 align-items-center">
      <div class="col">
        <div class="page-pretitle"> Project </div>
        <h2 class="page-title"> {{data.project.name}}
        </h2>
      </div>
      <div class="col-auto ms-auto d-print-none">
        <div class="btn-list">
          <a href="#" class="btn btn-secondary-outline d-none d-md-inline-block" onclick="toggleLayout(this)">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
              class="icon icon-tabler icons-tabler-outline icon-tabler-square-toggle-horizontal">
              <path stroke="none" d="M0 0h24v24H0z" fill="none" />
              <path d="M22 12h-20" />
              <path d="M4 14v-8a2 2 0 0 1 2 -2h12a2 2 0 0 1 2 2v8" />
              <path d="M18 20a2 2 0 0 0 2 -2" />
              <path d="M4 18a2 2 0 0 0 2 2" />
              <path d="M14 20l-4 0" />
            </svg>
            Toggle layout
          </a>
          <a href="#" class="btn btn-secondary-outline d-md-none btn-icon" onclick="toggleLayout(this)">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
              class="icon icon-tabler icons-tabler-outline icon-tabler-square-toggle-horizontal">
              <path stroke="none" d="M0 0h24v24H0z" fill="none" />
              <path d="M22 12h-20" />
              <path d="M4 14v-8a2 2 0 0 1 2 -2h12a2 2 0 0 1 2 2v8" />
              <path d="M18 20a2 2 0 0 0 2 -2" />
              <path d="M4 18a2 2 0 0 0 2 2" />
              <path d="M14 20l-4 0" />
            </svg>
          </a>
          <a href="/uploadExcel/{{data.project.slug}}" class="btn btn-secondary-outline d-none d-md-inline-block">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
              class="icon icon-tabler icons-tabler-outline icon-tabler-upload">
              <path stroke="none" d="M0 0h24v24H0z" fill="none" />
              <path d="M4 17v2a2 2 0 0 0 2 2h12a2 2 0 0 0 2 -2v-2" />
              <path d="M7 9l5 -5l5 5" />
              <path d="M12 4l0 12" />
            </svg>
            Bulk Upload
          </a>
          <a href="/uploadExcel/{{data.project.slug}}" class="btn btn-secondary-outline d-md-none btn-icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
              class="icon icon-tabler icons-tabler-outline icon-tabler-upload">
              <path stroke="none" d="M0 0h24v24H0z" fill="none" />
              <path d="M4 17v2a2 2 0 0 0 2 2h12a2 2 0 0 0 2 -2v-2" />
              <path d="M7 9l5 -5l5 5" />
              <path d="M12 4l0 12" />
            </svg>
          </a>
          {{#if (findInArray data.role "editProject")}}
          <a href="#" class="btn btn-secondary-outline d-none d-md-inline-block"
            id="#edit-project-{{data.project.slug}}" data-bs-toggle="modal"
            data-bs-target="#modal-{{data.project.slug}}">
            Edit this project
          </a>
          <a href="#" class="btn btn-secondary-outline d-md-none btn-icon" data-bs-toggle="modal"
            data-bs-target="#modal-{{data.project.slug}}" aria-label="Create new report">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
              class="icon icon-tabler icons-tabler-outline icon-tabler-pencil-plus">
              <path stroke="none" d="M0 0h24v24H0z" fill="none" />
              <path d="M4 20h4l10.5 -10.5a2.828 2.828 0 1 0 -4 -4l-10.5 10.5v4" />
              <path d="M13.5 6.5l4 4" />
              <path d="M16 19h6" />
              <path d="M19 16v6" />
            </svg>
          </a>
          {{/if}}
          {{#if (findInArray data.role "createEntry")}}
          <a href="#" class="btn btn-primary d-none d-md-inline-block" id="#createNewEntry" data-bs-toggle="modal"
            data-bs-target="#modal-new-entry">
            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24"
              stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
              <path stroke="none" d="M0 0h24v24H0z" fill="none" />
              <path d="M12 5l0 14" />
              <path d="M5 12l14 0" />
            </svg>
            Create new entry
          </a>
          <a href="#" class="btn btn-primary d-md-none btn-icon" data-bs-toggle="modal"
            data-bs-target="#modal-new-entry" aria-label="modal-new-entry">
            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24"
              stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
              <path stroke="none" d="M0 0h24v24H0z" fill="none" />
              <path d="M12 5l0 14" />
              <path d="M5 12l14 0" />
            </svg>
          </a>
          {{/if}}
        </div>
      </div>
    </div>
  </div>
</div>
<div class="container-xl pt-4" id="data-container">
  {{> showProject}}
</div>

{{#if (findInArray data.role "createEntry")}}
{{> emptyEntryModal}}
{{/if}}

{{#if (findInArray data.role "editProject")}}
{{> modalProject}}
{{/if}}

{{> projectsFrontEnd}}
{{> entryFrontEnd}}

<script src="https://cdn.jsdelivr.net/npm/tom-select/dist/js/tom-select.complete.min.js"></script>
<script>


  $(document).on("click", ".edit-entry", function (e) {

    const entryId = $(this).attr("entry-id");

    const modalExists = $(document).find(`#button-${entryId}`).length > 0;

    if (modalExists) {
      return $(`#button-${entryId}`).trigger("click");
    }

    $.ajax({
      url: `/getEntryModal/{{data.project.slug}}/${entryId}`,
      type: 'GET',
      contentType: 'application/json',
      success: function (response) {
        $("footer").before(response);
        $(`#button-${entryId}`).trigger("click");
        refreshImages();
        refreshFsLightbox();
      },
      error: function (xhr, status, error) {
        alert(xhr.responseText)
      }
    });

  })

  const defaultImageUrl = "/static/images/missing-image.png";

  const refreshImages = function () {
    $('img').each(function () {
      $(this).on('error', function () {
        $(this).attr('src', defaultImageUrl);
      });
    });
  }

  refreshImages();

  const toggleLayout = function (elem) {
    $.ajax({
      url: '/update-layout',
      method: 'POST',
      data: { layout: newLayout },
      success: function (response) {
        showData();
      },
      error: function () {
        alert("Failed to update layout.");
      }
    });
  }

  const showData = function () {
    const href = $('.page-item.active a').attr('my-href') || $("input[my-key='search']").attr("my-href") || "";
    $.ajax({
      url: `/getEntryData/{{data.project.slug}}${href}`,
      method: 'GET',
      success: function (response) {
        newLayout = newLayout == 'grid' ? 'table' : 'grid';
        $("#data-container").html(response);
        window.history.pushState(null, '', `/project/{{data.project.slug}}${href}`);
        refreshImages();

        setTimeout(initializeTomSelect, 100);
      },
      error: function (error) {
        alert(error.responseText);
      }
    });
  }

  $(document).on("click", ".filters .dropdown-menu .dropdown-item", function (e) {
    e.preventDefault();

    const type = $(this).attr('my-type');
    const options = $(this).attr('my-options') ? $(this).attr('my-options').split(',') : [];

    const inputContainer = $(this).closest('.input-group').find('.form-control, .form-select');
    inputContainer.remove();

    let newInput;
    if (type === 'date') {
      newInput = `<input type="text" class="form-control dateInput" aria-label="search by date" placeholder="e.g > 2020" />`;
    } else if (type === 'boolean') {
      newInput = `<select class="form-select" aria-label="search by column name">
                        ${options.map(option => `<option value="${option}">${option}</option>`).join('')}
                    </select>`;
    } else if (type === 'number') {
      newInput = `<input type="number" class="form-control" aria-label="search by column name" placeholder="Only numbers">`;
    } else if (type === 'dropdown') {
      newInput = `<select class="form-select" aria-label="search by column name">
                ${options.map(option => `<option value="${option}">${option}</option>`).join('')}
            </select>`;
    } else if (type === 'string') {
      newInput = `<input type="text" class="form-control" aria-label="search by column name" placeholder="Enter value">`;
    } else {
      newInput = `<input type="text" class="form-control" aria-label="search by column name" placeholder="Enter value">`;
    }

    $(this).closest('.input-group').append(newInput);

    $(this).closest('.input-group').find('.dropdown-toggle').attr({ 'my-name': $(this).attr('my-name') }).text($(this).attr('my-actual-name'));
  });

  $(document).on('input', '.dateInput', function (event) {
    const inputValue = event.target.value.trim();

    const conditionPattern = /^(>|<|>=|<=|=)?\s*(\d{1,2}\s+[A-Za-z]{3,9}\s+\d{4}|\d{4}|\s*[A-Za-z]{3,9}\s+\d{4})$/i;

    const datePattern = /^(?:\d{1,2}\s+[A-Za-z]{3,9}(?:\s+\d{4})?|[A-Za-z]{3,9}\s+\d{1,2}\s+\d{4}|(?:\d{4})\s+[A-Za-z]{3,9}\s+\d{1,2})$/i;

    if (conditionPattern.test(inputValue)) {

      console.log("Valid date detected: ", inputValue);
      const query = parseDateCondition(inputValue, conditionPattern);
      if (query) {
        console.log("MongoDB query: ", query.date);
        $(this).attr('query', JSON.stringify(query.date));
        $(this).attr('stop-search', false);
        $(this).attr('stop-search-msg', "Valid date format");
      } else {
        $(this).attr('stop-search', true);
        $(this).attr('stop-search-msg', "Invalid date format");
      }

    }
    else {
      console.log("Invalid input");
    }
  })

  function parseDateCondition(input, conditionPattern) {
    const match = input.trim().match(conditionPattern);

    if (match) {

      const operator = match[1] || "=";
      const dateStr = match[2].trim();
      let date;

      if (/^\d{4}$/.test(dateStr)) {
        date = new Date(`${dateStr}-01-01T00:00:00.000Z`);
      }
      else if (/^\d{1,2}\s+[A-Za-z]{3,9}\s+\d{4}$/.test(dateStr)) {
        const [day, month, year] = dateStr.split(" ");
        const months = {
          Jan: 0, Feb: 1, Mar: 2, Apr: 3, May: 4, Jun: 5,
          Jul: 6, Aug: 7, Sep: 8, Oct: 9, Nov: 10, Dec: 11
        };
        const monthIndex = months[month];
        date = new Date(Date.UTC(year, monthIndex, day));
      }
      else if (/^[A-Za-z]{3,9}\s+\d{4}$/.test(dateStr)) {
        const [month, year] = dateStr.split(" ");
        const months = {
          Jan: 0, Feb: 1, Mar: 2, Apr: 3, May: 4, Jun: 5,
          Jul: 6, Aug: 7, Sep: 8, Oct: 9, Nov: 10, Dec: 11
        };
        const monthIndex = months[month];
        date = new Date(Date.UTC(year, monthIndex, 1));
      }

      if (date == "Invalid Date") {
        console.log("Invalid date format");
        return null;
      }

      let query = {};
      switch (operator) {
        case ">":
          query.date = { $gt: date };
          break;
        case ">=":
          query.date = { $gte: date };
          break;
        case "<":
          query.date = { $lt: date };
          break;
        case "<=":
          query.date = { $lte: date };
          break;
        case "=":
        default:
          query.date = { $eq: date };
          break;
      }

      return query;
    }

    return null;
  }

  const doFilterSearch = function (elem) {

    const parentElem = $(elem).closest(".filters");

    const searchField = $(parentElem).find(".dropdown-toggle").attr('my-name');
    const valueElem = $(parentElem).find(".input-group input, .input-group select");
    if (valueElem.attr('stop-search') == true) {
      alert(valueElem.attr('stop-search-msg'));
      return;
    }

    const searchValue = valueElem.hasClass('dateInput') ? valueElem.attr('query') : valueElem.val().trim();
    const sortBy = $(parentElem).find(".sortBy .form-select").val();
    const orderBy = $(parentElem).find("input[name='btn-radio-basic']:checked").attr("id") === "btn-radio-basic-1" ? "asc" : "desc";

    const href = $(elem).attr("my-href") + `&sortBy=${encodeURIComponent(sortBy)}&orderBy=${orderBy}&${encodeURIComponent(searchField)}=${encodeURIComponent(searchValue)}`;

    doSearch(elem, href);

  }

  const doSearch = function (elem, href) {
    if (!href) {
      href = elem ? $(elem).attr("my-href") : '';
    }

    console.log('🔍 Searching with URL:', `/getEntryData/{{data.project.slug}}${href}`);

    const container = document.getElementById('data-container');
    if (container) {
      container.style.opacity = '0.5';
    }

    $.ajax({
      url: `/getEntryData/{{data.project.slug}}${href}`,
      method: 'GET',
      success: function (response) {
        console.log('✅ Search successful, updating DOM...');
        $("#data-container").html(response);
        window.history.pushState(null, '', `/project/{{data.project.slug}}${href}`);
        refreshImages();
        refreshFsLightbox();

        if (container) {
          container.style.opacity = '1';
        }

        setTimeout(initializeTomSelect, 100);
      },
      error: function (error) {
        console.error('❌ Search failed:', error);
        alert('Search failed: ' + (error.responseText || 'Unknown error'));

        if (container) {
          container.style.opacity = '1';
        }
      }
    });
  }

  $(document).on('keypress', '[my-href]', function (e) {
    if (e.which === 13 || e.keyCode === 13) {

      e.preventDefault();

      const href = $(this).attr("my-href");
      const key = $(this).attr("my-key");
      const value = $(this).val();
      const regex = new RegExp(`${key}=([^&]*)`, "g");
      const updatedHref = href.replace(regex, `${key}=${value}`);

      doSearch('', updatedHref);

    }
  });

  const refreshContainers = function () {
    $('.page-item.active > a').click();
  }

  let tomSelectInstance = null;

  function initializeTomSelect() {
    console.log('🔄 Initializing Tom Select...');

    if (tomSelectInstance) {
      console.log('🗑️ Destroying existing Tom Select instance');
      try {
        tomSelectInstance.destroy();
      } catch (e) {
        console.warn('Error destroying Tom Select:', e);
      }
      tomSelectInstance = null;
    }

    const selectElement = document.getElementById('customer-filter');
    console.log('🔍 Customer filter element:', selectElement);

    if (selectElement && typeof TomSelect !== 'undefined') {
      try {
        const preSelectedValues = [];
        selectElement.querySelectorAll('option[selected]').forEach(option => {
          preSelectedValues.push(option.value);
        });

        const urlParams = new URLSearchParams(window.location.search);
        const urlHiddenCustomers = urlParams.get('hideCustomers');
        if (urlHiddenCustomers) {
          const urlValues = urlHiddenCustomers.split(',').filter(id => id.trim());
          urlValues.forEach(value => {
            if (!preSelectedValues.includes(value)) {
              preSelectedValues.push(value);
            }
          });
        }

        tomSelectInstance = new TomSelect(selectElement, {
          maxItems: 10,
          plugins: ['remove_button'],
          placeholder: 'Select customers to hide...',
          searchField: ['text'],
          items: preSelectedValues,
          onItemAdd: function (value, item) {
            console.log('➕ Customer added to hide list:', value);

            const currentItems = tomSelectInstance.getValue();
            updateHiddenCustomersDisplay(currentItems.length);
          },
          onItemRemove: function (value) {
            console.log('➖ Customer removed from hide list:', value);

            const currentItems = tomSelectInstance.getValue();
            updateHiddenCustomersDisplay(currentItems.length);
          }
        });

        console.log('✅ Tom Select initialized successfully with pre-selected values:', preSelectedValues);

        updateHiddenCustomersDisplay(preSelectedValues.length);

      } catch (error) {
        console.error('❌ Tom Select initialization failed:', error);
      }
    } else {
      console.warn('⚠️ Tom Select element not found or TomSelect library not loaded');
    }
  }

  function updateHiddenCustomersDisplay(count) {
    const filterButton = document.querySelector('#heading-1 .accordion-button');
    if (filterButton) {
      const existingBadge = filterButton.querySelector('.badge');
      if (existingBadge) {
        existingBadge.remove();
      }

      if (count > 0) {
        const badge = document.createElement('span');
        badge.className = 'badge bg-orange ms-2';
        badge.textContent = `${count} hidden`;
        filterButton.appendChild(badge);
      }
    }
  }

  function applyAllFilters() {
    console.log('🎯 Applying all filters...');

    const parentElem = document.querySelector(".filters");

    const searchField = parentElem.querySelector(".dropdown-toggle").getAttribute('my-name') || '';
    const valueElem = parentElem.querySelector(".input-group input, .input-group select");
    let searchValue = '';

    if (valueElem) {
      if (valueElem.getAttribute('stop-search') === 'true') {
        alert(valueElem.getAttribute('stop-search-msg'));
        return;
      }
      searchValue = valueElem.classList.contains('dateInput') ?
        valueElem.getAttribute('query') || '' :
        valueElem.value.trim();
    }

    const sortBy = parentElem.querySelector(".sortBy .form-select").value;
    const orderBy = parentElem.querySelector("input[name='btn-radio-basic']:checked").id === "btn-radio-basic-1" ? "asc" : "desc";

    const hiddenCustomers = tomSelectInstance ? tomSelectInstance.getValue() : [];
    console.log('👥 Hidden customers from Tom Select:', hiddenCustomers);

    const urlParams = new URLSearchParams();

    urlParams.set('page', '1');
    urlParams.set('limit', '{{data.pagination.limit}}');
    urlParams.set('search', '{{data.pagination.search}}');
    urlParams.set('showSearchBar', 'true');
    urlParams.set('showFilters', 'true');

    urlParams.set('sortBy', sortBy);
    urlParams.set('orderBy', orderBy);

    if (searchField && searchValue) {
      urlParams.set(searchField, searchValue);
    }

    if (hiddenCustomers.length > 0) {
      urlParams.set('hideCustomers', hiddenCustomers.join(','));
      console.log('🔒 Adding hideCustomers parameter:', hiddenCustomers.join(','));
    } else {
      console.log('👍 No customers to hide');
    }

    const href = '?' + urlParams.toString();
    console.log('🔗 Final request URL:', href);

    updateHiddenCustomersDisplay(hiddenCustomers.length);

    doSearch('', href);
  }
  document.addEventListener('DOMContentLoaded', function () {
    console.log('📄 Page loaded, initializing Tom Select...');
    setTimeout(initializeTomSelect, 500);
  });

  $(document).ready(function () {
    console.log('📄 jQuery ready, initializing Tom Select...');
    setTimeout(initializeTomSelect, 600);
  });

  $(document).ready(function () {
    const urlParams = new URLSearchParams(window.location.search);
    const hideCustomers = urlParams.get('hideCustomers');
    if (hideCustomers) {
      console.log('🔍 URL contains hideCustomers parameter:', hideCustomers);
    }
  });
</script>